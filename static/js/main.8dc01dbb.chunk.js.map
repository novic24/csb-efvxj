{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","console","log","data","results","fetchData","className","map","movie","src","poster_path","backdrop_path","alt","id","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","name","original_name","overview","substr","Statistics","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dc01dbb.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/**base url to make request to the TMDB */\n//we do it to get easy requests.\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\"; //we import it from the file because we already create it\nimport \"./styles/Row.css\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  //when row appears on the screen we use this part. That's what useEffect does.\n  useEffect(() => {\n    //if [], run once when the row loads, and dont run it again. We just run it one time.\n\n    //we need an asyn function because we call data outsite the website (the api)\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      console.log(request.data.results);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    //we run the function fetchData()\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n  return (\n    <div>\n      <div className=\"row\">\n        <h2>{title}</h2>\n        <div className=\"row__posters\">\n          {movies.map((movie) => (\n            //   https://developers.themoviedb.org/3/getting-started/images\n            //we use the key={movie.id} to optimize react and be faster when we charge the website\n            <img\n              key={movie.id}\n              className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n              src={`${base_url}${\n                isLargeRow ? movie.poster_path : movie.backdrop_path\n              }`}\n              alt=\"{movie.name}\"\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n","//its not a componen, its a functional module, for this reason we dont capitalize the filename\n\nconst API_KEY = \"41c9b2d58576f444a6cecc880953a8e6\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-Us`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-Us`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./request\";\n\nimport \"./styles/Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n\n      console.log(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  console.log(movie);\n  //this function we use it on the description. If the text is bigger than n (in our case 150 characters)\n  //then this truncate the text/descrition and add \"...\"\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center center\"\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h3 className=\"banner__title\">\n          Any idea of what to watch? These are the TOP 10 movies of your\n          friends:{\" \"}\n        </h3>\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My favorites</button>\n        </div>\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n      <div className=\"banner--fadeBottom\"></div>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React from \"react\";\r\nimport Banner from \"./Banner\";\r\n\r\nconst Statistics = () => {\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n\r\n        backgroundPosition: \"center center\"\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h3 className=\"banner__title\">\r\n          Any idea of what to watch? These are the TOP 10 movies of your\r\n          friends:{\" \"}\r\n        </h3>\r\n        <h1 className=\"banner__title\">Get ideas from your friends</h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">TOP 10 movies</button>\r\n          <button className=\"banner__button\">TOP 10 series</button>\r\n          <button className=\"banner__button\">TOP movies this month</button>\r\n          <button className=\"banner__button\">\r\n            The last movie watched for your friends\r\n          </button>\r\n        </div>\r\n        <h1 className=\"banner__description\">dfgdfgdfgdf</h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\"></div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport Banner from \"./Banner\";\n\nimport requests from \"./request\";\nimport Statistics from \"./Statistics\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"app-menu\">\n        <h1>W h a t W e W a t c h</h1>\n        <button className=\"app__button\">Login</button>\n        <button className=\"app__button\">Register</button>\n        <button className=\"app__button\">Settings</button>\n        <button className=\"app__button\">My profile</button>\n      </div>\n\n      <Statistics></Statistics>\n      <Banner></Banner>\n      <Row\n        title=\"Trending Now\"\n        fetchUrl={requests.fetchTrending}\n        isLargeRow={true}\n      ></Row>\n      <Row\n        title=\"Netflix Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n      ></Row>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}></Row>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}></Row>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}></Row>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}></Row>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}></Row>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}></Row>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}